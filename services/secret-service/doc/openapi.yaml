openapi: 3.0.0
info:
  description: "Secrets service is used in the Open Integration Hub for managing secrets used in integration flows."
  version: "0.0.5"
  title: "Secrets Service"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
- name: Auth clients
  description: "Auth clients management"
- name: Secrets
  description: "Secrets management"
- name: Misc
  description: "Miscellaneous operations not related to the service business logic"
paths:
  /auth-clients/:
    get:
      tags:
      - Auth clients
      summary: "Retrieve all clients"
      description: "Retrieve all clients created by the current user."
      operationId: "getClients"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/AuthClient"
                  meta:
                    $ref: "#/components/schemas/Meta"

      security:
      - api_key: []
    post:
      tags:
      - Auth clients
      summary: "Create a client"
      description: "Create an client"
      operationId: "createClient"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                data:
                  $ref: "#/components/schemas/MutableAuthClient"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    $ref: "#/components/schemas/AuthClient"
        405:
          description: "Invalid input"
      security:
      - api_key: []
  /auth-clients/{clientId}:
    get:
      tags:
      - Auth clients
      summary: "Find client by ID"
      description: "Returns a client with given ID"
      operationId: "getClientById"
      parameters:
      - name: "clientId"
        in: "path"
        description: "ID of the client to return"
        required: true
        schema:
          type: string
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    $ref: "#/components/schemas/AuthClient"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Client with given ID not found"
      security:
      - api_key: []
    patch:
      tags:
      - Auth clients
      summary: "Update a client"
      description: "Update a client"
      operationId: "updateClient"
      parameters:
      - name: "clientId"
        in: "path"
        description: "ID of the client to update"
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                data:
                  $ref: "#/components/schemas/MutableAuthClient"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    $ref: "#/components/schemas/AuthClient"
        405:
          description: "Invalid input"
        404:
          description: "Client with given ID not found"
      security:
      - api_key: []
  /secrets/:
    get:
      tags:
      - Secrets
      summary: "Retrieve all secrets"
      description: "Retrieve all secrets belonging to the current user."
      operationId: "getSecrets"
      parameters:
      - name: filter[component]
        description: Only secrets belonging to the given component id
        in: query
        schema:
          type: string
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/Secret"
                  meta:
                    $ref: "#/components/schemas/Meta"

      security:
      - api_key: []
    post:
      tags:
      - Secrets
      summary: "Create a secret"
      description: "Create a secret"
      operationId: "createSecret"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                data:
                  $ref: "#/components/schemas/MutableSecret"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    $ref: "#/components/schemas/Secret"
        405:
          description: "Invalid input"
      security:
      - api_key: []
  /secrets/{secretId}:
    get:
      tags:
      - Secrets
      summary: "Find secret by ID"
      description: "Returns a secret with given ID"
      operationId: "getSecretById"
      parameters:
      - name: "secretId"
        in: "path"
        description: "ID of secret to return"
        required: true
        schema:
          type: string
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    $ref: "#/components/schemas/Secret"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Secret with given ID not found"
      security:
      - api_key: []
    patch:
      tags:
      - Secrets
      summary: "Update a secret"
      description: "Update a secret"
      operationId: "updateSecret"
      parameters:
      - name: "secretId"
        in: "path"
        description: "ID of secret to update"
        required: true
        schema:
          type: "string"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                data:
                  $ref: "#/components/schemas/MutableSecret"
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  data:
                    $ref: "#/components/schemas/Secret"
        405:
          description: "Invalid input"
      security:
      - api_key: []
    delete:
      tags:
      - Secrets
      summary: "Delete a secret"
      description: "Delete a secret"
      operationId: "deleteSecret"
      parameters:
      - name: "secretId"
        in: "path"
        description: "ID of secret to update"
        required: true
        schema:
          type: "string"
      responses:
        204:
          description: "The secret was deleted successfully"
        404:
          description: "Secret with given ID not found"
      security:
      - api_key: []
  /healthcheck:
    get:
      tags:
      - "misc"
      summary: "Retrieve health status"
      description: "Retrieve health status of the API."
      operationId: "performHealthcheck"
      responses:
        200:
          description: "successful operation"
components:
  securitySchemes:
    api_key:
      type: "apiKey"
      name: "api_key"
      in: "header"
  schemas:
    MutableThreeLeggedOAuth2Client:
      required:
      - clientId
      - clientSecret
      - refreshTokenUrl
      properties:
        name:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        refreshTokenUrl:
          type: string
    MutableOAuth1Client:
      required:
      - consumerKey
      - consumerSecret
      - nonce
      - signature
      - signatureMethod
      - verifier
      properties:
        name:
          type: string
        consumerKey:
          type: string
        consumerSecret:
          type: string
        nonce:
          type: string
        signature:
          type: string
        signatureMethod:
          type: string
        version:
          type: string
    MutableAuthClient:
      oneOf:
      - $ref: "#/components/schemas/MutableOAuth1Client"
      - $ref: "#/components/schemas/MutableThreeLeggedOAuth2Client"
    OAuth1Client:
      allOf:
      - $ref: "#/components/schemas/MutableOAuth1Client"
      - type: "object"
        required:
        - id
        - createdAt
        properties:
          id:
            type: "string"
          createdAt:
            type: string
            description: Client creation time
            format: date-time
          updatedAt:
            type: string
            description: Client update time
            format: date-time
    ThreeLeggedOAuth2Client:
      allOf:
      - $ref: "#/components/schemas/MutableThreeLeggedOAuth2Client"
      - type: "object"
        required:
        - id
        - createdAt
        properties:
          id:
            type: string
          createdAt:
            type: string
            description: Client creation time
            format: date-time
          updatedAt:
            type: string
            description: Client update time
            format: date-time

    AuthClient:
      oneOf:
      - $ref: "#/components/schemas/OAuth1Client"
      - $ref: "#/components/schemas/ThreeLeggedOAuth2Client"

    MutableSecret:
      type: object
      required:
      - name
      properties:
        name:
          type: string
          description: Human readable secret name
          example: My Secret
        type:
          type: string
          enum:
          - three-legged-oauth1
          - three-legged-oauth2
          - basic
          - other
        value:
          oneOf:
          - $ref: '#/components/schemas/MixedSecret'
          - $ref: '#/components/schemas/OAuth1Secret'
          - $ref: '#/components/schemas/OAuth2Secret'
          - $ref: '#/components/schemas/BasicSecret'
          discriminator:
            propertyName: type
        owners:
          type: array
          items:
            $ref: "#/components/schemas/Owner"
      example:
        type: other
        name: My Basic Auth Secret
        value:
          username: admin
          password: secret
        owners: [{id: '585430d3f02852a8a9fac45e',type: 'user'}]
    Secret:
      allOf:
      - $ref: "#/components/schemas/MutableSecret"
      - type: "object"
        required:
        - id
        - createdAt
        properties:
          id:
            type: "string"
          createdAt:
            type: string
            description: Secret creation time
            format: date-time
          updatedAt:
            type: string
            description: Secret update time
            format: date-time

    OAuth2Secret:
      type: object
      required:
      - accessToken
      - accessTokenExpiresIn
      - refreshToken
      - authClientId
      properties:
        accessToken:
          type: string
        accessTokenExpiresIn:
          type: integer
        refreshToken:
          type: string
        authClientId:
          type: string
          description: Id of the auth client this secret was created with
    OAuth1Secret:
      type: object
      required:
      - token
      - tokenSecret
      - authClientId
      properties:
        token:
          type: string
        tokenSecret:
          type: string
        authClientId:
          type: string
          description: Id of the auth client this secret was created with
    BasicSecret:
      type: object
      required:
      - username
      - password
      properties:
        username:
          type: string
        password:
          type: string
    MixedSecret:
      type: object
      additionalProperties: {}
    Owner:
      type: object
      required:
      - id
      - type
      properties:
        id:
          type: string
        type:
          type: string
    Meta:
      type: "object"
      properties:
        page:
          type: "integer"
        perPage:
          type: "integer"
        total:
          type: "integer"
        totalPages:
          type: "integer"